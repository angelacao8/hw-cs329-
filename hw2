from emora_stdm import KnowledgeBase, DialogueFlow
from enum import Enum, auto


# TODO: Update the State enum as needed
class State(Enum):
    START = 0
    PROMPT = 1
    ERR = 2
    END = 3
    EXIT = auto()
    PROMPT2 = 4
    Ending = auto()
    # These are for the first response
    First_feeling_positive = auto()
    First_feeling_negative = auto()
    Catch_feeling_positive = auto()
    Catch_feeling_negative = auto()
    First_feeling_good = auto()

    # Positivity Tree
    First_positive_prompt = auto()

    # Negative Tree
    First_negative_prompt = auto()
    First_negative_response = auto()
    U2A = auto()
    U2B = auto()

    # 3rd
    P3 = auto()
    P3B = auto()
    U3A = auto()
    ERR2 = auto()

    ###ANGER STATES###
    ANGER1 = auto()
    ANGER2 = auto()
    QUESTION1 = auto()
    QUESTION2 = auto()
    PERSON = auto()
    ACTIVITY = auto()
    INEVITABLE = auto()
    AVOIDABLE = auto()
    IDENTIFYPERSON = auto()
    IDENTIFYACTIVITY = auto()
    INEVDESCRIP = auto()
    AVOIDDESCRIP = auto()
    TRIED = auto()
    NOTTRIED = auto()
    FRIEND = auto()
    FAMILY = auto()
    INEVITABLERESPYES = auto()
    INEVITABLERESPNO = auto()
    AVOIDABLERESPCONTROL = auto()
    AVOIDABLERESPINABILITY = auto()
    CHECKIN = auto()
    CHECKIN1 = auto()
    CHECKIN2 = auto()
    CHECKIN3 = auto()
    CHECKIN4 = auto()
    CHECKIN5 = auto()
    CHECKIN6 = auto()
    CHECKIN7 = auto()
    CHECKINRESP = auto()
    CHECKINRESP1 = auto()
    CHECKINRESP2 = auto()
    CHECKINRESP3 = auto()
    CHECKINRESP4 = auto()
    CHECKINRESP5 = auto()
    CHECKINRESP6 = auto()
    CHECKINRESP7 = auto()
    TRIEDINTERMISSION = auto()
    NOTTRIEDINTERMISSION = auto()
    FRIENDINTERMISSION = auto()
    FAMILYINTERMISSION = auto()
    INEVITABLEINTERMISSION = auto()
    NOTINEVITABLEINTERMISSION = auto()
    CONTROLINTERMISSION = auto()
    NOTCONTROLINTERMISSION = auto()
    ERRANG = auto()
    ERRANG1 = auto()
    ERRANG2 = auto()
    ERRANG3 = auto()
    ERRANG4 = auto()
    ERRANG5 = auto()

    # DEPRESSION
    P4CD = auto()
    P4C = auto()
    P4C1 = auto()
    U4C1 = auto()
    U4C2 = auto()
    U4C3 = auto()
    U4C4 = auto()
    U4C5 = auto()
    P4C1A = auto()
    P4C1Asecond = auto()
    P4C2B = auto()
    P4C3C = auto()
    P4C4D = auto()
    P4C4E = auto()
    U4C4E1 = auto()
    U4C4D2 = auto()
    U4C4D1 = auto()
    U4C4D1A1 = auto()
    P4C4D2A = auto()
    P4C4D1A = auto()
    P4C4E1A = auto()
    P4C2B1A = auto()
    P4C2B2A = auto()
    U4C4E1A1 = auto()
    U4C4D1A2 = auto()
    U4C4E1A2 = auto()
    P4C4E1A1A = auto()
    U4C4E1A1A = auto()
    U4C4E1A1B = auto()
    U4C4D2A1 = auto()
    U4C2B1 = auto()
    U4C2B2 = auto()
    U4C2B3 = auto()
    U4C2B4 = auto()
    P4C2B4A = auto()
    U4C2B2A3 = auto()
    U4C2B2A2 = auto()
    U4C2B2A1 = auto()
    U4C2B1A2 = auto()
    U4C2B1A1 = auto()
    P4C2B1A1A = auto()
    P4C4E1A2A = auto()
    U4C4E1A2A1 = auto()
    U4C4E1A2A2 = auto()
    P4C2B2A3A = auto()
    P4C4D1A1A = auto()
    P4C2B2A1A = auto()
    P4C2B1A2A = auto()
    U4C2B1A1A1 = auto()
    P4C2B1A1A1A = auto()
    U4C2B1A1A1A1 = auto()
    U4C2B1A1A1A2 = auto()
    U4C2B2A1A1 = auto()
    U4C4D1A1A1 = auto()
    P4C4D1A2A = auto()
    U4C4D1A2A2 = auto()
    U4C4D1A2A1 = auto()
    U4C2B1A2A1 = auto()
    U4C2B1A2A2 = auto()
    P4C2B1A2A1A = auto()
    U4C2B1A2A1A1 = auto()
    U4C2B1A2A1A2 = auto()
    P4C4D1A1A1A = auto()
    P4C2B1A2A2A = auto()
    P4C2B2A1A1A = auto()
    U4C4D1A1A1A1 = auto()
    U4C2B2A1A1A2 = auto()
    U4C2B2A1A1A1 = auto()
    U4C2B1A2A2A1 = auto()
    P4C2B2A1A1A1A = auto()
    U4C2B2A1A1A1A1 = auto()
    U4C2B2A1A1A1A2 = auto()
    U4C2B2A1A1A2A1 = auto()
    P4C2B2A1A1A2A = auto()
    U4C2B2A1A1A2A2 = auto()
    P4C4D1A1A1A1A = auto()
    P4CE = auto()
    P4CERR = auto()
    P4CERR2 = auto()
    P4CERR3 = auto()
    P4CERR4 = auto()
    P4CERR5 = auto()
    P4CERR6 = auto()
    P4CERR7 = auto()
    P4CERR8 = auto()
    P4CERR9 = auto()
    P4CERR10 = auto()
    P4CERR11 = auto()
    P4CERR12 = auto()
    P4CERR13 = auto()
    P4CERR14 = auto()
    P4CERR15 = auto()
    P4CERR16 = auto()
    P4CERR17 = auto()
    P4CERR18 = auto()
    P4CERR19 = auto()
    P4CERR20 = auto()
    P4CERR21 = auto()
    A11 = auto()
    A111 = auto()
    A1111 = auto()

    P4D = auto()
    U4D1 = auto()
    P4D1 = auto()

    # eating
    P4E = auto()
    U4E1 = auto()
    U4E2 = auto()
    P4E1A = auto()
    P4E2A = auto()
    U4E1A2 = auto()
    U4E1A1 = auto()
    U4E2A1 = auto()
    U4E2A2 = auto()
    P4E1A2A = auto()
    P4E1A2B = auto()
    P4E2A1A = auto()
    P4E2A2A = auto()
    U4E1A2B1 = auto()
    U4E2A1A1 = auto()
    U4E2A1A2 = auto()
    U4E2A2A1 = auto()
    U4E2A2A2 = auto()
    U4E2A2A1A1 = auto()
    P4E2A2A1A = auto()
    P4E2A2A2A = auto()
    U4EA = auto()
    P4EERR = auto()
    P4E1AERR = auto()
    P4E1A2AERR = auto()
    P4E1A2BERR = auto()
    P4E2AERR = auto()
    P4E2A1AERR = auto()
    P4E2A2AERR = auto()
    P4E2A2A2AERR = auto()
    S1 = auto()
    S2 = auto()
    S3 = auto()
    S4 = auto()
    S5 = auto()
    S6 = auto()
    S7 = auto()
    S8 = auto()
    S9 = auto()
    S10 = auto()
    S11 = auto()
    S12 = auto()
    S13 = auto()
    S14 = auto()
    S15 = auto()
    S16 = auto()
    S17 = auto()
    S18 = auto()
    S19 = auto()
    S20 = auto()
    S21 = auto()
    S22 = auto()
    S23 = auto()
    S24 = auto()
    S25 = auto()
    S26 = auto()
    S27 = auto()
    S28 = auto()
    S29 = auto()
    S30 = auto()
    S31 = auto()
    S32 = auto()
    S33 = auto()
    S34 = auto()
    S35 = auto()
    S36 = auto()
    S37 = auto()
    S38 = auto()
    S39 = auto()
    S40 = auto()
    S41 = auto()
    S42 = auto()
    S43 = auto()
    S44 = auto()
    S45 = auto()
    S46 = auto()
    S47 = auto()
    S48 = auto()
    S49 = auto()
    S50 = auto()
    S51 = auto()
    S52 = auto()
    S53 = auto()
    S54 = auto()
    S55 = auto()
    S56 = auto()
    S57 = auto()
    S58 = auto()
    S59 = auto()
    S60 = auto()
    S61 = auto()
    S62 = auto()
    S63 = auto()
    S64 = auto()
    S65 = auto()
    S66 = auto()
    S67 = auto()
    S68 = auto()
    S69 = auto()
    S70 = auto()
    S71 = auto()
    S72 = auto()
    S73 = auto()
    S74 = auto()
    S75 = auto()
    S76 = auto()
    S77 = auto()
    S78 = auto()
    S79 = auto()
    S80 = auto()
    S81 = auto()
    S82 = auto()
    S83 = auto()
    S84 = auto()
    S85 = auto()
    S86 = auto()
    S87 = auto()
    S88 = auto()
    S89 = auto()
    S90 = auto()
    S91 = auto()
    S92 = auto()
    S93 = auto()
    S94 = auto()
    S95 = auto()
    S96 = auto()
    S97 = auto()
    S98 = auto()
    S99 = auto()
    S100 = auto()

    U1 = auto()
    U2 = auto()
    U3 = auto()
    U4 = auto()
    U5 = auto()
    U6 = auto()
    U7 = auto()
    U8 = auto()
    U9 = auto()
    U10 = auto()
    U11 = auto()
    U12 = auto()
    U13 = auto()
    U14 = auto()
    U15 = auto()
    U16 = auto()
    U17 = auto()
    U18 = auto()
    U19 = auto()
    U20 = auto()
    U21 = auto()
    U22 = auto()
    U23 = auto()
    U24 = auto()
    U25 = auto()
    U26 = auto()
    U27 = auto()
    U28 = auto()
    U29 = auto()
    U30 = auto()
    U31 = auto()
    U32 = auto()
    U33 = auto()
    U34 = auto()
    U35 = auto()
    U36 = auto()
    U37 = auto()
    U38 = auto()
    U39 = auto()
    U40 = auto()
    U41 = auto()
    U42 = auto()
    U43 = auto()
    U44 = auto()
    U45 = auto()
    U46 = auto()
    U47 = auto()
    U48 = auto()
    U49 = auto()
    U50 = auto()
    U51 = auto()
    U52 = auto()
    U53 = auto()
    U54 = auto()
    U55 = auto()
    U56 = auto()
    U57 = auto()
    U58 = auto()
    U59 = auto()
    U60 = auto()
    U61 = auto()
    U62 = auto()
    U63 = auto()
    U64 = auto()
    U65 = auto()
    U66 = auto()
    U67 = auto()
    U68 = auto()
    U69 = auto()
    U70 = auto()
    U71 = auto()
    U72 = auto()
    U73 = auto()
    U74 = auto()
    U75 = auto()
    U76 = auto()
    U77 = auto()
    U78 = auto()
    U79 = auto()
    U80 = auto()
    U81 = auto()
    U82 = auto()
    U83 = auto()
    U84 = auto()
    U85 = auto()
    U86 = auto()
    U87 = auto()
    U88 = auto()
    U89 = auto()
    U90 = auto()
    U91 = auto()
    U92 = auto()
    U93 = auto()
    U94 = auto()
    U95 = auto()
    U96 = auto()
    U97 = auto()
    U98 = auto()
    U99 = auto()
    U100 = auto()


    # Yuewu Zhou ######################################################################################################
    # confrontation branch ###################################################################

    # Confrontation prompt
    confrontation_prompt = auto()
    # A: We had an argument/fight
    confrontation_answer = auto()

    # - How did it start?
    confrontation_cause_prompt = auto()

    # - A: Other person / self / don't know (don't know leads to improvement branch)
    confrontation_cause_answer = auto()
    confrontation_cause_self = auto()
    confrontation_cause_other = auto()
    confrontation_cause_dontknow = auto()
    confrontation_cause_error = auto()

    # -- Do you think it was intentional?
    confrontation_intentional_yn = auto()

    # -- Yes / No
    confrontation_intentional_answer = auto()

    # --- Why do you think they said that?
    confrontation_intentional_motive_prompt = auto()

    # --- A: Positive / negative sentiment
    confrontation_intentional_motive_answer = auto()

    # ---- Is it justified to argue because (reason) ?
    confrontation_intentional_motive_yn = auto()

    # ---- TO DO: Handle positive vs negative answers

    # -- Is this something that usually happens?
    confrontation_usual_prompt = auto()

    # -- A: Yes / No (Yes leads to advice branch)
    confrontation_usual_yn = auto()

    # --- When was the last time this has happened?
    confrontation_usual_when = auto()

    # --- A: time
    confrontation_usual_when_answer = auto()

    # ---- Have you met with (pronoun) since (time) where you haven't had a (confrontation)?
    confrontation_usual_when_yn = auto()

    # caught self & other branch ###################################################################
    # A: I (catch verb)
    confrontation_self_answer = auto()

    # - How do you think that made them feel?
    confrontation_self_feel_prompt = auto()

    # - A: good / bad
    confrontation_self_feel_answer = auto()

    # -- What do you think could have gone better?
    confrontation_self_improvement_prompt = auto()

    # -- A: verbs (could have) / I don't know or nothing
    confrontation_self_improvement_answer = auto()

    # --- That's sounds great! / Interesting. / I think that would work! Anything else?
    confrontation_self_improvement_yn = auto()

    # --- A: Yes / No (yes returns to confrontation_self_improvement_yn, no transitions to advice)
    confrontation_self_improvement_yn_answer = auto()

    # A: He/She/They (catch verb)
    confrontation_other_answer = auto()

    # - Why do you think they (caught verb) (transitions to intentionality in argument branch)
    confrontation_other_why_prompt = auto()

    # no catch branch ###################################################################
    # A: (no catch)
    confrontation_noCatch_answer = auto()

    # - Was it something that you did?
    confrontation_noCatch_self_prompt = auto()

    # - A: Yes / No (yes leads to self branch)
    confrontation_noCatch_self_answer = auto()

    # -- Was it something that someone else did?
    confrontation_noCatch_other_prompt = auto()

    # -- A: Yes / No (yes leads to other branch branch)
    confrontation_noCatch_other_answer = auto()

    # advice branch ###################################################################
    # Could I offer you some advice?
    confrontation_advice_yn = auto()

    # A: Yes / No (no ends the conversation)
    confrontation_advice_yn_answer = auto()

    # - Would a calmer attitude have helped the situation?
    confrontation_advice_calmer_yn = auto()

    # - A: Yes / No / Maybe (no transitions to other treatment)
    confrontation_advice_calmer_answer = auto()

    # -- Here are some techniques to calm yourself down
    # TO DO: offer advice to calm down

    # usual branch ###################################################################
    # Why do you spend time with this person?
    confrontation_exposure_prompt = auto()

    # because ...
    confrontation_exposure_answer = auto()

    # Will you keep spending time with them?
    confrontation_exposure_why = auto()

    # Yes / No
    confrontation_exposure_yn = auto()

    # Is it maybe a good idea to spend some time away from them and cool off?
    confrontation_exposure_end = auto()

    # treatment branch ###################################################################
    # Still researching treatments, placeholder for advice
    confrontation_treatment_placeholder = auto()

    # Relaxed breathing recommendation
    confrontation_treatment_relaxedbreathing = auto()
    confrontation_treatment_relaxedbreathing_response = auto()
    confrontation_treatment_relaxedbreathing2 = auto()
    confrontation_treatment_relaxedbreathing_response2 = auto()

    # Journaling
    confrontation_treatment_journaling = auto()
    confrontation_treatment_journaling_response = auto()
    confrontation_treatment_journaling2 = auto()
    confrontation_treatment_journaling_response2 = auto()
    # END
    ENDwGREET = auto()

    ############# END Confrontation #####################


# TODO: create the ontology as needed
ontology = {
    "ontology": {
        "ontP4C":
            [
                "ontschool",
                "onttired",
                "ontfunclub",
                "ontbadclub",
                "ontsad",
                "ontfamily",
                "ontdunno",
                "ontclubs",
                "ontwork",
                "ontunsure",
                "onthotline",
                "onteating",
                "onteatingtoolittle",
                "onteatingtoomuch",
                "ontangry",
                "ontnewyork",
                "ontnewjersey",
                "ontcalifornia",
                "ontmichigan",
                "ontbadstate",
                "ontokaystate",
                "ontcorona",
                "ontstillbusy",
                "ontgoodactivities",
                "ontbadactivities",
                "ontwasteoftime"
            ],
        "ontstillbusy":
            [
                "still busy",
                "lots of work",
                "stressed",
                "too much work",
                "busy",
                "work"
            ],
        "ontgoodactivities":
            [
                "knitting",
                "knit",
                "knitted",
                "baking",
                "bakes",
                "made",
                "making",
                "homework",
                "school",
                "schoolwork",
                "family",
                "mom",
                "dad",
                "mother",
                "father",
                "sister",
                "brother",
                "sibling",
                "siblings",
                "creating",
                "create",
                "created",
                "hobby",
                "exploring",
                "explore",
                "explored",
                "reading",
                "book",
                "books",
                "read",
                "growing",
                "grow",
                "grew",
                "building",
                "build",
                "built",
                "yoga",
                "job",
                "organizing",
                "cleaning",
                "organize",
                "organized",
                "clean",
                "cleaned"
                "staying home",
                "social distancing",
                "social distance",
                "quarantine",
                "journaling",
                "scrapbooking",
                "journal",
                "scrapbook",
                "singing",
                "violin",
                "piano",
                "practice",
                "practicing",
                "write",
                "writing",
                "guitar",
                "camera",
                "photography",
                "photos",
                "photographs",
                "editing",
                "dancing",
                "singing",
                "sing",
                "dance",
                "exercising",
                "exercise",
                "running",
                "pilates",
                "run",
                "stretching",
                "stretch",
                "jog",
                "jogging",
                "blogilates",
                "recipes",
                "recipe",
                "novels",
                "novel"
            ],
        "ontbadactivities":
            [
                "stressing",
                "worrying",
                "money",
                "financial",
                "finances",
                "lost my job",
                "lost job",
                "unemployed,",
                "crying",
                "cry",
                "cried",
                "sad",
                "depressed",
                "depression",
                "shock",
                "shocked",
                "news",
                "checking",
                "refreshing",
                "videogames",
                "gaming",
                "games"
            ],
        "ontwasteoftime":
            [
                "netflix",
                "movies",
                "tv",
                "television",
                "hulu",
                "nothing",
                "blanking out",
                "instagram",
                "scrolling",
                "phone",
                "bed",
                "sleeping",
                "social media",
                "tik tok",
                "memes",
                "youtube",
                "facebook",
                "scrolling",
                "napping",
                "napped",
                "naps",
                "slept",
                "sleep"
            ],
        "ontcorona":
            [
                "corona",
                "coronavirus",
                "the virus",
                "virus",
                "covid",
                "covid-19"
            ],
        "ontnewjersey":
            [
                "new jersey",
                "nj",
                "garden"
            ],
        "ontcalifornia":
            [
                "california",
                "cali"
            ],
        "ontmichigan":
            [
                "michigan",
                "mich"
            ],
        "ontbadstate":
            [
                "louisiana",
                "la",
                "pennsylvania",
                "pa",
                "florida",
                "massachusetts",
                "ma",
                "illinois",
                "georgia",
                "ga",
                "texas",
                "washington",
                "connecticut",
                "indiana",
                "maryland",
                "md",
                "colorado",
                "ohio",
                "tennessee",
                "virginia",
                "north carolina",
                "nc",
                "missouri",
                "arizona",
                "wisconsin",
                "south carolina",
                "sc",
                "alabama",
                "nevada",
                "mississippi",
                "utah",
                "oklahoma",
                "district of columbia",
                "washington dc",
                "dc",
                "kentucky",
                "rhode island",
                "ri",
                "idaho",
                "oregon",
                "minnesota",
                "iowa",
                "arkansas",
                "ar",
                "kansas"
            ],
        "ontokaystate":
            [
                "delaware",
                "new mexico",
                "nm",
                "new hampshire",
                "nh",
                "puerto rico",
                "pr",
                "vermont",
                "vm",
                "maine",
                "nebraska",
                "west virginia",
                "wv",
                "hawaii",
                "south dakota",
                "sd"
                "montana",
                "guam",
                "north dakota",
                "wyoming",
                "alaska",
                "ak",
                "virgin islands",
                "northern mariana islands",
            ],
        "ontnewyork":
            [
              "new york"
              "nyc"
            ],
        "ontangry":
            [
                "angry",
                "mad",
                "terrifying",
                "anger"
            ],
        "onteating":
            [
                "eat",
                "eating",
                "feasting",
                "feast",
                "food",
                "nutrition",
                "vitamins",
                "calorie",
                "calories"
                "hungry",
                "binge",
                "binge-eating"
            ],
        "onteatingtoolittle":
            [
                "little",
                "enough",
                "hungry",
                "malnourished",
                "nourished",
                "small",
                "skinny",
                "wee",
                "bite-sized",
                "bitesized",
                "mini",
                "tiny"
            ],
        "onteatingtoomuch":
            [
                "lot",
                "indulge",
                "binge",
                "binging",
                "binge-eating",
                "too",
                "much",
                "bad",
                "overeat",
                "overeating",
                "over-eating",
                "feasting",
                "feast"
            ],
        "onthotline":
            [
                "die",
                "kill",
                "murder",
                "commit",
                "suicide"
            ],
        "ontunsure":
            [
                "unsure",
                "dunno",
                "uncertain",
                "not",
                "idk",
                "don't",
                "know",
                "don't know",
                "no idea",
                "confused",
                "confuse"
            ],
        "ontwork":
            [
                "work",
                "job",
                "money",
                "pay",
                "income",
                "Income",
                "money",
                "cash",
                "paycheck",
                "bills"
            ],
        "ontclubs":
            [
                "club",
                "Club",
                "sport",
                "Sport",
                "team",
                "Team",
                "group",
                "Group",
                "extracurricular",
                "Extracurricular",
                "activity",
                "Activity",
                "watch",
                "relax",
                "chill",
                "netflix",
                "movie",
                "movies",
                "hulu"
            ],
        "ontdunno":
            [
                "know",
                "no",
                "idk",
                "dunno",
                "reason",
                "just",
                "not",
                "sure",
                "unsure",
                "no idea",
                "don't know"
                "Idk",
                "Dunno"
            ],
        "ontfamily":
            [
                "family",
                "parent",
                "sister",
                "brother",
                "kid",
                "child",
                "sibling",
                "cousin",
                "dad",
                "mom",
                "father",
                "mother",
                "Parent",
                "Family",
                "PARENTS",
                "cousin",
                "uncle",
                "nephew",
                "aunt",
                "grandparents",
                "grandma",
                "grandpa",
                "grandmother",
                "grandfather",
                "greatgrandfather",
                "maternal",
                "removed"
            ],
        "ontsad":
            [
                "sad",
                "down",
                "unhappy",
                "depressed",
                "depressing",
                "lost",
                "purposeless"
                "blue",
                "dumps",
                "gross",
                "bad",
                "sorrow",
                "sorrowful",
                "regretful",
                "downcast",
                "heavy",
                "miserable",
                "gloom",
                "gloomy",
                "low-spirited",
                "broken-hearted",
                "broken",
                "low",
                "wretched",
                "desolate",
                "crestfallen",
                "mournful",
                "doleful",
                "mourn",
                "mourning",
                "despondent",
                "out of sorts",
                "dejected",
                "awful",
                "inconsolable"
            ],
        "ontbadclub":
            [
                "resume",
                "looks",
                "appears",
                "not",
                "dunno",
                "don't",
                "Dunno",
                "no idea",
                "don't know",
                "not sure",
                "unsure",
                "idk",
                "Resume",
                "Idk"
            ],
        "ontfunclub":
            [
                "fun",
                "enjoy",
                "destress",
                "relaxing",
                "entertaining",
                "socializing",
                "friends",
                "entertain",
                "relax",
                "people",
                "social",
                "friend",
                "Fun",
                "great",
                "calming",
                "calm",
                "invigorate",
                "invigorating",
                "chill",
                "laid back",
                "vibe",
                "amusing",
                "amuse",
                "break"
            ],
        "onttired":
            [
                "hours",
                "tired",
                "fatigue",
                "fatigued",
                "sleeping",
                "exhausted",
                "sleep",
                "too",
                "exhaust",
                "worn",
                "overtired",
                "weary",
                "sleepy",
                "drowsy",
                "wearied",
                "sapped",
                "dog-tired",
                "spent",
                "drained",
                "debilitated",
                "prostrate",
                "enervated",
                "enervate",
                "jaded",
                "dead",
                "deadbeat",
                "shattered",
                "burnt",
                "knackered",
                "pooped"
            ],
        "ontschool":
            [
                "grades",
                "midterm",
                "final",
                "college",
                "exam",
                "school",
                "class",
                "test",
                "course",
                "balance",
                "balancing"
                "Grades",
                "Midterm",
                "Final",
                "College",
                "Exam",
                "Test",
                "study",
                "Study",
                "course",
                "studying",
                "professor",
                "teacher",
                "canvas",
                "assignment",
                "assignments"
            ],
        "ontemotion":
            [
                "ontnegative",
                "onpositive",
                "ontneutral",
                "ontunexpected"
            ],
        "ontnegative":
            [
                "anger",
                "disgust",
                "sadness",
                "fear",
                "bad",
                "scared",
                "scare",
                "scary",
                "onttired",
                "ontschool",
                "ontsad",
                "ontfamily",
                "ontdunno",
                "ontwork",
                "ontunsure",
                "lonely",
                "loneliness",
                "alone",
                "isolated",
                "sick",
                "fever",
                "corona",
                "coronavirus",
                "worried",
                "worry",
                "worrying",
                "not"
            ],
        "ontpositive":
            [
                "happiness",
                "happy",
                "Happy",
                "joy",
                "love",
                "great",
                "euphoria",
                "euphoric",
                "super",
                "best",
                "amazing",
                "amaze",
                "amazed",
                "gold",
                "luck",
                "good",
                "positive",
                "radiated",
                "radiating",
                "delight",
                "delighted",
                "fantastic",
                "ecstatic",
                "generous",
                "loving",
                "grateful",
                "loved"
            ],
        "ontneutral":
            [
                "good",
                "ok",
                "fine",
                "okay",
                "neutral",
                "okay",
                "nothing",
                "don\'t care",
                "dont care",
                "bored",
                "boring",
                "bore"
            ],
        "ontunexpected":
            [
                "fear",
                "Fear",
                "surprise",
                "Surprise",
                "startle",
                "jumped",
                "startled",
                "jump",
                "scare",
                "scared",
                "fright",
                "frightened",
                "terror",
                "terrorized",
                "terrorizing",
                "frightening",
                "panic",
                "panicked",
                "panicking",
                "alarm",
                "alarmed",
                "anxious",
                "anxiety",
                "feared",
                "jumped"
            ],
        "ontperception":
            [
                "control",
                "Control",
                "inability",
                "unable",
                "can't",
                "cant",
                "Can't",
                "Cant",
                "powerless",
                "Powerless",
                "lack"
            ],
        "ontaffirm":
            [
                "yes",
                "yea",
                "Yea",
                "yeah",
                "yep",
                "mhm",
                "mmhmm",
                "mmhm",
                "mhmm",
                "okay",
                "ok",
                "sure",
                "alright",
                "i know",
                "sure",
                "noted",
                "agree",
                "great",
                "good",
                "understood",
                "understand",
                "proceed",
                "yup"
            ],
        "ontnegate":
            [
                "no",
                "nah",
                "nope",
                "No",
                "NO",
                "Nah",
                "NAH",
                "Nope",
                "NOPE",
                "na",
                "Na",
                "nah",
                "not at all",
                "disagree"
            ],
        "ontbecause":
            [
                "because",
                "since",
                "thus",
                "hence"
            ],
        ########## confrontation branch ontologies ##############
        "ontconfrontation":
            [
                "argument",
                "argued",
                "argument"
                "fight",
                "fought",
                "dispute",
                "disagreement",
                "physical",
                "yelling",
                "yelled",
                "yell",
                "name-calling",
                "screaming",
                "screamed",
                "scream",
                "confront",
                "confronted"
                "confrontation"
            ],
        ### anger ontologies ###
        "ontanger":
            [
                "ontcontrol",
                "ontinability",
                "ontinevitable",
                "ontavoidable",
                "onttried",
                "ontfriend"
            ],
        "ontcontrol":
            [
                "control",
                "controlling",
                "controlled",
                "inflexible"
            ],
        "ontinevitable":
            [
                "inevitable"
            ],
        "ontavoidable":
            [
                "avoidable",
                "avoid",
                "ran from",
                "avoided"
            ],
        "onttried":
            [
                "tried",
                "try",
                "trying"
            ],
        "ontfriend":
            [
                "friend",
                "friends"
            ]
    }
}
knowledge = KnowledgeBase()
knowledge.load_json(ontology)
df = DialogueFlow(State.START, initial_speaker=DialogueFlow.Speaker.SYSTEM, kb=knowledge)

df.add_system_transition(State.START, State.PROMPT, '"Hi, how are you feeling today?"')

# The first user response feeling
df.add_user_transition(State.PROMPT, State.First_feeling_positive, '[$positive=#ONT(ontpositive)]')
df.add_user_transition(State.PROMPT, State.First_feeling_negative, '[$negative=#ONT(ontnegative)]')
df.set_error_successor(State.PROMPT, State.ERR)
# df.set_error_successor(State.First_feeling_positive, State.ERR2)
# df.set_error_successor(State.First_feeling_negative, State.ERR2)

####### Move to anger branch ##########################
df.add_user_transition(State.PROMPT, State.ANGER1, '[$confrontation=#ONT(ontangry)]')
df.add_user_transition(State.PROMPT, State.ANGER2, '[$confrontation=#ONT(ontangry)]')
######################################################################


# Feeling Positive
df.add_system_transition(State.First_feeling_positive, State.First_positive_prompt,
                         '"That\'s great, good luck on the rest of life!"')
df.add_user_transition(State.First_positive_prompt, State.END, "/.*/")

# Feeling Negative
df.add_system_transition(State.First_feeling_negative, State.A11, '"Do you go to college?"')
df.add_user_transition(State.A11, State.A111, '[$conju=#ONT(ontaffirm)]')
df.add_user_transition(State.A11, State.A1111, '[$conju=#ONT(ontnegate)]')

df.add_system_transition(State.A111, State.First_negative_prompt,
                         '[!"What\'s been making you feel"$negative"?"]')
df.add_user_transition(State.First_negative_prompt, State.U11, '[$conju=#ONT(ontcorona)]')

# df.add_user_transition(State.x, State.U2B, '[$conju=#ONT(ontbecause)]')
# df.set_error_successor(State.First_negative_prompt, State.ERR2)

####### Move to confrontation branch ##########################
df.add_user_transition(State.First_negative_prompt, State.confrontation_answer,
                       '[$confrontation=#ONT(ontconfrontation)]')
######################################################################

####### Move to anger branch ##########################
df.add_user_transition(State.First_negative_prompt, State.ANGER1, '[$confrontation=#ONT(ontangry)]')
df.add_user_transition(State.First_negative_prompt, State.ANGER2, '[$confrontation=#ONT(ontangry)]')
######################################################################

# U2B
df.add_system_transition(State.U2B, State.P3, '"Can you tell me more about how you\'re feeling?"')
df.set_error_successor(State.U2B, State.ERR2)

# U2A
df.add_system_transition(State.First_negative_prompt, State.P3, '"Why is that?"')
df.set_error_successor(State.First_negative_prompt, State.ERR2)

####### Move to confrontation branch ##########################
df.add_user_transition(State.P3, State.confrontation_answer, '[$confrontation=#ONT(ontconfrontation)]')
######################################################################

####### Move to anger branch ##########################
df.add_user_transition(State.P3, State.ANGER1, '[$confrontation=#ONT(ontangry)]')
df.add_user_transition(State.P3, State.ANGER2, '[$confrontation=#ONT(ontangry)]')
######################################################################

# P3
df.set_error_successor(State.P3, State.ERR2)

# Intro Errors
df.add_system_transition(State.ERR2, State.PROMPT2,
                         '"I didn\'t catch that, could you tell me more about how you are feeling?"')
df.add_user_transition(State.PROMPT2, State.First_feeling_positive, '[$positive=#ONT(ontpositive)]')
df.add_user_transition(State.PROMPT2, State.First_feeling_negative, '[$negative=#ONT(ontnegative)]')
df.set_error_successor(State.PROMPT2, State.ERR)
df.set_error_successor(State.First_feeling_positive, State.ERR)
df.set_error_successor(State.First_feeling_negative, State.ERR)

# Ending
df.add_system_transition(State.ERR, State.EXIT, '"I don\'t understand, Goodbye!"')
df.add_system_transition(State.END, State.EXIT, '"Goodbye! Thank you for talking to me today!"')
# df.set_error_successor(State.END, State.END)

### ANGER BRANCH ###

df.add_system_transition(State.ANGER1, State.QUESTION1,
                         '"Is there a person/activity that comes to mind that may cause you anger? "')
df.add_system_transition(State.ANGER2, State.QUESTION2,
                         '"Do you think getting angry was or was not inevitable? If it was not inevitable, how do you think it could have been avoided or not avoided?"')

# U4 POSSIBLE BRANCHES DEPENDING ON USER RESPONSE

df.add_user_transition(State.QUESTION1, State.PERSON, "[$person=#ONT(ontfamily,ontfriend)]")
df.add_user_transition(State.QUESTION1, State.ACTIVITY, '[$activity=#POS(verb)]')
df.set_error_successor(State.QUESTION1, State.ANGER2)
df.add_user_transition(State.QUESTION2, State.INEVITABLE, "[$inevitable=#ONT(ontinevitable)]")
df.add_user_transition(State.QUESTION2, State.AVOIDABLE, "[$avoidable=#ONT(ontavoidable)]")

# S5 TRANSITIONS
df.add_system_transition(State.PERSON, State.IDENTIFYPERSON,
                         '[!"Thank you for telling me about your hard time dealing with "$person". \n Have you tried or not tried resolving this issue directly with "$person"? \n Please feel free to tell me exactly how you went about fixing this relationship if you have already tried."]')
df.add_system_transition(State.ACTIVITY, State.IDENTIFYACTIVITY,
                         '[!"Thank you for telling me about your difficult time engaging with that " $activity ". \n Have you tried talking to your friends or family about this " $activity"? \n Let me know explicitly whether you spoke to either your friends or family."]')
df.add_system_transition(State.INEVITABLE, State.INEVDESCRIP,
                         '"Would you say that your anger partly stems from lack of control over your situation?"')
df.add_system_transition(State.AVOIDABLE, State.AVOIDDESCRIP,
                         '"Did you feel inability or control over trying to avoid the situation"')

# U5 TRANSITIONS
df.add_user_transition(State.IDENTIFYPERSON, State.TRIED, "[$tried=#ONT(onttried)]")
df.add_user_transition(State.IDENTIFYPERSON, State.NOTTRIED, '[[not,tried]]')
df.add_user_transition(State.IDENTIFYACTIVITY, State.FRIEND, "[$friend=#ONT(ontfriend)]")
df.add_user_transition(State.IDENTIFYACTIVITY, State.FAMILY, "[$family=#ONT(ontfamily)]")
df.add_user_transition(State.INEVDESCRIP, State.INEVITABLERESPYES, "[$yes=#ONT(ontaffirm)]")
df.add_user_transition(State.INEVDESCRIP, State.INEVITABLERESPNO, "[$no=#ONT(ontnegate)]")
df.add_user_transition(State.AVOIDDESCRIP, State.AVOIDABLERESPCONTROL, "[$control=#ONT(ontcontrol)]")
df.add_user_transition(State.AVOIDDESCRIP, State.AVOIDABLERESPINABILITY, "[$inability=#ONT(ontinability)]")

# P6 TRANSITIONS
df.add_system_transition(State.TRIED, State.CHECKIN,
                         '"I see. Well, I\'d say now is a great time for a quick break. In one word, could you tell me how you are feeling at this moment? "')
df.add_system_transition(State.NOTTRIED, State.CHECKIN,
                         '"I see. Well, I\'d say now is a great time for a quick break. In one word, could you tell me how you are feeling at this moment? "')
df.add_system_transition(State.FRIEND, State.CHECKIN,
                         '"I see. Well, I\'d say now is a great time for a quick break. In one word, could you tell me how you are feeling at this moment? "')
df.add_system_transition(State.FAMILY, State.CHECKIN,
                         '"I see. Well, I\'d say now is a great time for a quick break. In one word, could you tell me how you are feeling at this moment? "')
df.add_system_transition(State.INEVITABLERESPYES, State.CHECKIN1,
                         '"$yes. I see. Well, I\'d say now is a great time for a quick break. In one word, could you tell me how you are feeling at this moment? "')
df.add_system_transition(State.INEVITABLERESPNO, State.CHECKIN2,
                         '"$no. I see. Well, I\'d say now is a great time for a quick break. In one word, could you tell me how you are feeling at this moment? "')
df.add_system_transition(State.AVOIDABLERESPCONTROL, State.CHECKIN3,
                         '"$control. I see. Well, I\'d say now is a great time for a quick break. In one word, could you tell me how you are feeling at this moment? "')
df.add_system_transition(State.AVOIDABLERESPINABILITY, State.CHECKIN4,
                         '"$inability. I see. Well, I\'d say now is a great time for a quick break. In one word, could you tell me how you are feeling at this moment? "')

# U6 TRANSITIONS(SENTIMENT ANALYZER WILL BE USED FOR THIS SECTION EVENTUALLY)
df.add_user_transition(State.CHECKIN, State.CHECKINRESP, "[$checkin=#ONT(ontnegative,ontpositive,ontneutral)]")
df.add_user_transition(State.CHECKIN1, State.CHECKINRESP1, "[$checkin1=#ONT(ontnegative,ontpositive,ontneutral)]")
df.add_user_transition(State.CHECKIN2, State.CHECKINRESP2, "[$checkin2=#ONT(ontnegative,ontpositive,ontneutral)]")
df.add_user_transition(State.CHECKIN3, State.CHECKINRESP3, "[$checkin3=#ONT(ontnegative,ontpositive,ontneutral)]")
df.add_user_transition(State.CHECKIN4, State.CHECKINRESP4, "[$checkin4=#ONT(ontnegative,ontpositive,ontneutral)]")
df.add_user_transition(State.CHECKIN5, State.CHECKINRESP5, "[$checkin5=#ONT(ontnegative,ontpositive,ontneutral)]")
df.add_user_transition(State.CHECKIN6, State.CHECKINRESP6, "[$checkin6=#ONT(ontnegative,ontpositive,ontneutral)]")
df.add_user_transition(State.CHECKIN7, State.CHECKINRESP7, "[$checkin7=#ONT(ontnegative,ontpositive,ontneutral)]")

# P7 TRANSITIONS(INTERMISSION/END OF HW2nt)
df.add_system_transition(State.CHECKINRESP, State.TRIEDINTERMISSION,
                         '"Well, I need to step outside for a quick second. When I get back, I\'d like to start talking through potential solutions for your problem."')
df.add_system_transition(State.CHECKINRESP1, State.NOTTRIEDINTERMISSION,
                         '"Well, I need to step outside for a quick second. When I get back, I\'d like to start talking through potential solutions for your problem"')
df.add_system_transition(State.CHECKINRESP2, State.FRIENDINTERMISSION,
                         '"Well, I need to step outside for a quick second. When I get back, I\'d like to start talking through potential solutions for your problem"')
df.add_system_transition(State.CHECKINRESP3, State.FAMILYINTERMISSION,
                         '"Well, I need to step outside for a quick second. When I get back, I\'d like to start talking through potential solutions for your problem"')
df.add_system_transition(State.CHECKINRESP4, State.INEVITABLEINTERMISSION,
                         '"Well, I need to step outside for a quick second. When I get back, I\'d like to start talking through potential solutions for your problem"')
df.add_system_transition(State.CHECKINRESP5, State.NOTINEVITABLEINTERMISSION,
                         'Well, I need to step outside for a quick second. When I get back, I\'d like to start talking through potential solutions for your problem')
df.add_system_transition(State.CHECKINRESP6, State.CONTROLINTERMISSION,
                         '"Well, I need to step outside for a quick second. When I get back, I\'d like to start talking through potential solutions for your problem"')
df.add_system_transition(State.CHECKINRESP7, State.NOTCONTROLINTERMISSION,
                         '"Well, I need to step outside for a quick second. When I get back, I\'d like to start talking through potential solutions for your problem"')

# ERROR SYSTEM TRANSITIONS
df.add_system_transition(State.ERRANG, State.ERRANG, r"[!I don't know that person.]")
df.add_system_transition(State.ERRANG1, State.ERRANG1, r"[!I've never heard of that activity.]")
df.add_system_transition(State.ERRANG2, State.ERRANG2, r"[!I've not heard of that type of friend.]")
df.add_system_transition(State.ERRANG3, State.ERRANG3, r"[!I've not heard of that type of family member.]")
# USE THE BELOW ERROR STATE FOR THE INEVITABLE/AVOIDABLE BRANCHES
df.add_system_transition(State.ERRANG4, State.ERRANG4, r"[!I don't understand.]")
df.add_system_transition(State.ERRANG5, State.ERRANG5, r"[!I have not heard of that feeling.]")

# ERROR SUCCESSOR STATES
df.set_error_successor(State.PERSON, State.ERRANG)
df.set_error_successor(State.ACTIVITY, State.ERRANG1)
df.set_error_successor(State.FRIEND, State.ERRANG2)
df.set_error_successor(State.FAMILY, State.ERRANG3)
df.set_error_successor(State.INEVITABLERESPYES, State.ERRANG4)
df.set_error_successor(State.INEVITABLERESPNO, State.ERRANG4)
df.set_error_successor(State.AVOIDABLERESPCONTROL, State.ERRANG4)
df.set_error_successor(State.AVOIDABLERESPINABILITY, State.ERRANG4)

df.set_error_successor(State.CHECKINRESP, State.ERRANG5)
df.set_error_successor(State.CHECKINRESP1, State.ERRANG5)
df.set_error_successor(State.CHECKINRESP2, State.ERRANG5)
df.set_error_successor(State.CHECKINRESP3, State.ERRANG5)
df.set_error_successor(State.CHECKINRESP4, State.ERRANG5)

### END OF ANGER BRANCH ###


# angela's stuff
####################################################################################

df.add_user_transition(State.First_negative_prompt, State.U4C1, "[$response=#ONT(ontschool)]")
df.add_user_transition(State.First_negative_prompt, State.U4C2, "[$response=#ONT(ontfamily)]")
df.add_user_transition(State.First_negative_prompt, State.U4C3, "[$response=#ONT(ontdunno)]")
df.add_user_transition(State.First_negative_prompt, State.U4C4, "[$response=#ONT(ontclubs)]")
df.add_user_transition(State.First_negative_prompt, State.U4C5, "[$response=#ONT(ontwork)]")

df.add_system_transition(State.U4C1, State.P4C1A, '"What do you do to de-stress from school?"')

df.add_system_transition(State.P4CERR2, State.P4C1A, '"Could you explain a little further?"')
df.set_error_successor(State.P4C1A, State.P4CERR2)

df.add_user_transition(State.P4C1A, State.U4C4, "[$response=#ONT(ontclubs)]")
df.add_system_transition(State.U4C2, State.P4C2B,
                         '"Do you think your family places pressure on you? Or maybe you do it to yourself?"')
df.add_system_transition(State.P4CERR3, State.P4C2B, '"Could you explain a little further?"')
df.set_error_successor(State.P4C2B, State.P4CERR3)
df.add_system_transition(State.U4C3, State.P4C3C,
                         '"Has anything changed in your life recently? If so, what field of your life has changed?"')
df.add_system_transition(State.P4CERR4, State.P4C3C, '"I\'m sorry, could you restate that?"')
df.set_error_successor(State.P4C3C, State.P4CERR4)
df.add_user_transition(State.P4C2B, State.U4C2B1, "[$yes=#ONT(ontaffirm)]")
df.add_user_transition(State.P4C2B, State.U4C2B2, r"[/(.*)(myself)(.*)/]")
df.add_user_transition(State.P4C2B, State.U4C2B3, "[$no=#ONT(ontnegate)]")
df.add_user_transition(State.P4C2B, State.U4C2B4, "[$response=#ONT(ontunsure)]")
df.add_system_transition(State.U4C2B1, State.P4C2B1A, '"Have you talked to them about how this is unnecessary?"')
df.add_system_transition(State.P4CERR5, State.P4C2B1A, '"I\'m sorry, could you restate that?"')
df.set_error_successor(State.P4C2B1A, State.P4CERR5)
df.add_system_transition(State.U4C2B2, State.P4C2B2A,
                         '"So you place pressure on yourself, I assume. Do you do any activities to destress?"')
df.add_system_transition(State.U4C2B3, State.P4C2B2A,
                         '"So you place pressure on yourself, I assume. Do you do any activities to destress?"')
df.add_system_transition(State.P4CERR6, State.P4C2B2A, '"Could you explain a little further?"')
df.set_error_successor(State.P4C2B2A, State.P4CERR6)
df.add_user_transition(State.P4C2B2A, State.U4C2B2A1, "[$no=#ONT(ontnegate)]")
df.add_user_transition(State.P4C2B2A, State.U4C2B2A3, "[$yes=#ONT(ontaffirm)]")
df.add_user_transition(State.P4C2B1A, State.U4C2B1A1, "[$yes=#ONT(ontaffirm)]")
df.add_user_transition(State.P4C2B1A, State.U4C2B1A2, "[$no=#ONT(ontnegate)]")
df.add_system_transition(State.U4C2B1A2, State.P4C2B1A2A,
                         '"I feel like you should talk to them about how they place unnecessary pressure on you. Can you try that?"')
df.add_system_transition(State.P4CERR7, State.P4C2B1A2A, '"I\'m sorry, could you restate that?"')
df.set_error_successor(State.P4C2B1A2A, State.P4CERR7)
df.add_user_transition(State.P4C2B1A2A, State.U4C2B1A2A1, "[$yes=#ONT(ontaffirm)]")
df.add_user_transition(State.P4C2B1A2A, State.U4C2B1A2A2, "[$no=#ONT(ontnegate)]")
df.add_system_transition(State.U4C2B1A2A1, State.P4C2B1A2A1A,
                         '"Great! Why don\'t you let me know how it goes next session?"')
df.add_system_transition(State.P4CERR8, State.P4C2B1A2A1A, '"Could you explain a little further?"')
df.set_error_successor(State.P4C2B1A2A1A, State.P4CERR8)
df.add_user_transition(State.P4C2B1A2A1A, State.U4C2B1A2A1A1, "[$yes=#ONT(ontaffirm)]")
df.add_user_transition(State.P4C2B1A2A1A, State.U4C2B1A2A1A2, "[$no=#ONT(ontnegate)]")
df.add_system_transition(State.U4C2B1A2A1A2, State.END, '"Goodbye! Thanks for talking to me today!"')
df.add_system_transition(State.U4C2B1A2A1A1, State.END, '"Goodbye! Thanks for talking to me today!"')
df.add_system_transition(State.U4C2B1A1, State.P4C2B1A1A, '"What did they say?"')
df.add_system_transition(State.P4CERR9, State.P4C2B1A1A, '"Could you explain a little further?"')
df.set_error_successor(State.P4C2B1A1A, State.P4CERR9)
df.add_user_transition(State.P4C2B1A1A, State.U4C2B1A1A1, "/.*/")
df.add_system_transition(State.U4C2B1A1A1, State.P4C2B1A1A1A,
                         '"That\'s very interesting. Do you do any activities to take your mind off this stress? "')
df.add_system_transition(State.P4CERR10, State.P4C2B1A1A1A, '"Could you explain a little further?"')
df.set_error_successor(State.P4C2B1A1A1A, State.P4CERR10)
df.add_user_transition(State.P4C2B1A1A1A, State.U4C2B1A1A1A1, "[$yes=#ONT(ontaffirm)]")
df.add_user_transition(State.P4C2B1A1A1A, State.U4C2B1A1A1A2, "[$no=#ONT(ontnegate)]")
df.add_system_transition(State.U4C2B2A1, State.P4C2B2A1A,
                         '"That\'s not good! You should always participate in something you enjoy. What would you do for fun if you had the time?"')
df.add_system_transition(State.U4C2B1A1A1A2, State.P4C2B2A1A,
                         '"That\'s not good! You should always participate in something you enjoy. What would you do for fun if you had the time?"')
df.add_system_transition(State.P4CERR11, State.P4C2B2A1A, '"Could you explain a little further?"')
df.set_error_successor(State.P4C2B2A1A, State.P4CERR11)
df.add_user_transition(State.P4C2B2A1A, State.U4C2B2A1A1, "/.*/")
df.add_system_transition(State.U4C2B2A1A1, State.P4C2B2A1A1A,
                         '"Does your college have a club for this? What is it called?"')
df.add_system_transition(State.P4CERR12, State.P4C2B2A1A1A, '"Could you explain a little further?"')
df.set_error_successor(State.P4C2B2A1A1A, State.P4CERR12)
df.add_user_transition(State.P4C2B2A1A1A, State.U4C2B2A1A1A2, "[$no=#ONT(ontnegate)]")
df.add_user_transition(State.P4C2B2A1A1A, State.U4C2B2A1A1A1, "[$response=#ONT(ontclubs)]")
df.add_system_transition(State.U4C2B2A1A1A2, State.P4C2B2A1A1A2A,
                         '"That\'s unfortunate. Why don\'t you seek out off-campus resources for this activity and let me know how it goes next time?"')
df.add_system_transition(State.P4CERR13, State.P4C2B2A1A1A2A, '"Could you explain a little further?"')
df.set_error_successor(State.P4C2B2A1A1A2A, State.P4CERR13)
df.add_user_transition(State.P4C2B2A1A1A2A, State.U4C2B2A1A1A2A2, "[$yes=#ONT(ontaffirm)]")
df.add_system_transition(State.U4C2B2A1A1A2A2, State.END, '"Goodbye! Thanks for talking to me today!"')
df.add_user_transition(State.P4C2B2A1A1A2A, State.U4C2B2A1A1A2A1, "[$no=#ONT(ontnegate)]")
df.add_system_transition(State.U4C2B2A1A1A2A1, State.P4C2B1A2A2A,
                         '"I think this inability to take action holds you back. Why don\'t you brace yourself to take action and then we can talk again next time?"')
df.add_system_transition(State.P4CERR14, State.P4C2B1A2A2A, '"I\'m sorry, could you restate that?"')
df.set_error_successor(State.P4C2B1A2A2A, State.P4CERR14)
df.add_system_transition(State.U4C2B2A1A1A1, State.P4C2B2A1A1A1A,
                         '"Great! Why don\'t you join it and let me know how it goes?"')
df.add_user_transition(State.P4C2B2A1A1A1A, State.U4C2B2A1A1A1A2, "[$no=#ONT(ontnegate)]")
df.add_system_transition(State.U4C2B2A1A1A1A2, State.P4C2B1A2A2A,
                         '"I think this inability to take action holds you back. Why don\'t you brace yourself to take action and then we can talk again next time?"')
df.add_user_transition(State.P4C2B2A1A1A1A, State.U4C2B2A1A1A1A1, "[$yes=#ONT(ontaffirm)]")
df.add_system_transition(State.U4C2B2A1A1A1A1, State.END, '"Goodbye! Thanks for talking to me today!"')
df.add_user_transition(State.P4C2B1A2A2A, State.U4C2B1A2A2A1, "/.*/")
df.add_system_transition(State.U4C2B1A2A2A1, State.END, '"Goodbye! Thanks for talking to me today!"')
df.add_system_transition(State.U4C2B1A2A2, State.P4C2B1A2A2A,
                         '"I think this inability to take action holds you back. Why don\'t you brace yourself to take action and then we can talk again next time?"')
df.add_system_transition(State.U4C4D1A2A2, State.P4C2B1A2A2A,
                         '"I think this inability to take action holds you back. Why don\'t you brace yourself to take action and then we can talk again next time?"')
df.add_system_transition(State.U4C2B2A3, State.P4C2B2A3A, '"Which activities do you participate in?"')
df.add_system_transition(State.U4C2B1A1A1A1, State.P4C2B2A3A, '"Which activities do you participate in?"')
df.add_system_transition(State.P4CERR15, State.P4C2B2A3A, '"Could you explain a little further?"')
df.set_error_successor(State.P4C2B2A3A, State.P4CERR15)
df.add_user_transition(State.P4C2B2A3A, State.P4C, "/.*/")
df.add_system_transition(State.P4C, State.P4C4D, '"Why do you participate in this?"')
df.add_user_transition(State.P4C4D, State.U4C4D2, "[$response=#ONT(ontbadclub)]")
df.add_user_transition(State.P4C4D, State.U4C4D1, "[$response=#ONT(ontfunclub)]")
df.add_system_transition(State.U4C2B4, State.P4C2B4A,
                         '"I suggest you first try to figure out where this pressure is coming from, then. Do you do any activities to destress?"')
df.add_system_transition(State.P4CERR16, State.P4C2B4A, '"I\'m sorry, could you restate that?"')
df.set_error_successor(State.P4C2B4A, State.P4CERR16)
df.add_user_transition(State.P4C2B4A, State.P4C1, "/.*/")
df.add_system_transition(State.P4C1, State.P4C4D, '"Why do you participate in $reponse?"')
df.add_system_transition(State.P4CERR17, State.P4C4D, '"Could you explain a little further?"')
df.set_error_successor(State.P4C4D, State.P4CERR17)
df.add_system_transition(State.U4C4, State.P4C4D, '"Why do you participate in $reponse?"')
df.add_system_transition(State.U4C4D1, State.P4C4D1A,
                         '"I\'m glad you enjoy it! Does this add any stress to your life? Why?"')
df.add_system_transition(State.U4C2B2A2, State.P4C4D1A,
                         '"I\'m glad you enjoy it! Does this add any stress to your life? Why?"')
df.add_system_transition(State.P4CERR18, State.P4C4D1A, '"I\'m sorry, could you restate that?"')
df.set_error_successor(State.P4C4D1A, State.P4CERR18)
df.add_user_transition(State.P4C4D1A, State.U4C4D1A1, "[$yes=#ONT(ontaffirm)]")
df.add_system_transition(State.U4C4D1A1, State.P4C4D1A1A,
                         '"You must really care about it if it stresses you out and you still participate. Can you tell me more about why you care about this activity?"')
df.add_user_transition(State.P4C4D1A1A, State.U4C4D1A1A1, "/.*/")
df.add_system_transition(State.U4C4D1A1A1, State.P4C4D1A1A1A,
                         '"It seems to add another dimension into your life, which is good. I suggest you continue participating and try to focus on the positives. Why don\'t you let me know how this goes next session?"')
df.add_user_transition(State.P4C4D1A1A1A, State.U4C4D1A1A1A1, "/.*/")
df.add_system_transition(State.U4C4D1A1A1A1, State.END, '"Goodbye! Thanks for talking to me today!"')
df.add_user_transition(State.P4C4D1A, State.U4C4D1A2, "[$no=#ONT(ontnegate)]")
df.add_system_transition(State.U4C4D1A2, State.P4C4D1A2A,
                         '"I suggest you first try to categorize what activities add or detract stress from your life. Can you do that for me before our next session?"')
df.add_user_transition(State.P4C4D1A2A, State.U4C4D1A2A2, "[$no=#ONT(ontnegate)]")
df.add_user_transition(State.P4C4D1A2A, State.U4C4D1A2A1, "[$yes=#ONT(ontaffirm)]")
df.add_system_transition(State.P4C4D1A2A, State.END, '"Goodbye! Thanks for talking to me today!"')
df.add_system_transition(State.U4C5, State.P4C4E, '"Where do you work?"')
df.add_user_transition(State.P4C4E, State.U4C4E1, "/.*/")
df.add_system_transition(State.U4C4D2, State.P4C4D2A,
                         '"That\'s not a great reason to put time into something. Do you enjoy it at all?"')
df.add_user_transition(State.P4C4D2A, State.U4C4D2A1, "/.*/")
df.add_system_transition(State.U4C4D2A1, State.P4C4E1A1A,
                         '"That\'s good, that you have something you enjoy. So what stresses you out about it?"')
df.add_system_transition(State.U4C4E1, State.P4C4E1A, '"Do you enjoy your job at all?"')
df.add_system_transition(State.P4CERR19, State.P4C4E1A, '"Could you explain a little further?"')
df.set_error_successor(State.P4C4E1A, State.P4CERR19)
df.add_user_transition(State.P4C4E1A, State.U4C4E1A1, "[$yes=#ONT(ontaffirm])")
df.add_user_transition(State.P4C4E1A, State.U4C4E1A2, "[$no=#ONT(ontnegate)]")
df.add_system_transition(State.U4C4E1A2, State.P4C4E1A2A,
                         '"Well, do you participate in an extracurricular that you enjoy?"')
df.add_system_transition(State.P4CERR20, State.P4C4E1A2A, '"Could you explain a little further?"')
df.set_error_successor(State.P4C4E1A2A, State.P4CERR20)
df.add_user_transition(State.P4C4E1A2A, State.U4C4E1A2A1, "[$yes=#ONT(ontaffirm)]")
df.add_user_transition(State.P4C4E1A2A, State.U4C4E1A2A2, "[$no=#ONT(ontnegate)]")
df.add_system_transition(State.U4C4E1A2A1, State.P4C2B2A3A, '"Which activities do you participate in?"')
df.add_system_transition(State.U4C4E1A2A2, State.P4C2B2A1A,
                         '"That\'s not good! You should always participate in something you enjoy. What would you do for fun if you had the time?"')
df.add_system_transition(State.U4C4E1A1, State.P4C4E1A1A,
                         '"That\'s good, that you have something you enjoy. So what stresses you out about it?"')
df.add_system_transition(State.P4CERR21, State.P4C4E1A1A, '"Could you explain a little further?"')
df.set_error_successor(State.P4C4E1A1A, State.P4CERR21)
df.add_user_transition(State.P4C4E1A1A, State.U4C1, "[$response=#ONT(ontschool)]")
df.add_user_transition(State.P4C4E1A1A, State.U4C4E1A1B, "[$response=#ONT(onttired)]")
df.add_system_transition(State.U4C4E1A1B, State.P4C2B1A1A1A,
                         '"That\'s very interesting. Do you do any activities to take your mind off this stress?"')

# --------------------------------------------------------------------
# hotlinecatch
df.add_user_transition(State.First_negative_prompt, State.P4D, "[$response=#ONT(onthotline)]")
df.add_system_transition(State.P4D, State.U4D1,
                         '"Oh no! I am very afraid that this may be a violent or life-threatening situation. Here are some hotlines: Suicide: 8002738255, Domestic violence: 8007997233, Sexual assault: 8006564673."')
df.add_user_transition(State.U4D1, State.P4D1, "/.*/")
df.add_system_transition(State.P4D1, State.END, '"Goodbye! Thanks for talking to me today!"')

######################################################################
# eating
df.add_user_transition(State.First_negative_prompt, State.U4EA, "[$response=#ONT(onteating)]")
df.add_system_transition(State.U4EA, State.P4E,
                         '"Oh no! Eating regularly and healthily is a very important part of growing. Can you tell me more about your problem?"')
df.add_system_transition(State.P4EERR, State.P4E, '"Could you explain a little further?"')
df.add_user_transition(State.P4E, State.U4E1, "[$response=#ONT(onteatingtoomuch)]")
df.add_user_transition(State.P4E, State.U4E2, "[$response=#ONT(onteatingtoolittle)]")
df.add_system_transition(State.U4E1, State.P4E1A,
                         '"Haha, weight gain is common in college students. Do you think it actually harms you, though?"')
df.add_system_transition(State.P4E1AERR, State.P4E1A, '"Could you explain a little further?"')
df.add_user_transition(State.P4E1A, State.U4E1A2, "[$yes=#ONT(ontaffirm)]")
df.add_user_transition(State.P4E1A, State.U4E1A1, "[$no=#ONT(ontnegate)]")
df.add_system_transition(State.U4E1A2, State.P4E1A2A,
                         '"You may eat excessively because you are stressed. Has anything been stressing you out recently?"')
df.add_system_transition(State.P4E1A2AERR, State.P4E1A2A, '"Could you explain a little further?"')
df.add_user_transition(State.P4E1A2A, State.U4C1, "[$response=#ONT(ontschool)]")
df.add_user_transition(State.P4E1A2A, State.U4C2, "[$response=#ONT(ontfamily)]")
df.add_user_transition(State.P4E1A2A, State.U4C3, "[$response=#ONT(ontdunno)]")
df.add_user_transition(State.P4E1A2A, State.U4C4, "[$response=#ONT(ontclubs)]")
df.add_user_transition(State.P4E1A2A, State.U4C5, "[$response=#ONT(ontwork)]")
df.add_system_transition(State.U4E1A1, State.P4E1A2B,
                         '"Haha, I think you\'re doing just fine. Your body is just growing, as it should be. "')
df.add_system_transition(State.P4E1A2BERR, State.P4E1A2B, '"Could you explain a little further?"')
df.add_user_transition(State.P4E1A2B, State.U4E1A2B1, "/.*/")
df.add_system_transition(State.U4E1A2B1, State.END, '"Goodbye! Thanks for talking to me today!"')
df.add_system_transition(State.U4E2, State.P4E2A,
                         '"Oh no, that\'s a problem! You need to eat. Are you on a meal plan?"')
df.add_system_transition(State.P4E2AERR, State.P4E2A, '"Could you explain a little further?"')
df.add_user_transition(State.P4E2A, State.U4E2A1, "[$yes=#ONT(ontaffirm)]")
df.add_user_transition(State.P4E2A, State.U4E2A2, "[$no=#ONT(ontnegate)]")
df.add_system_transition(State.U4E2A1, State.P4E2A1A,
                         '" I think you need to make more of an effort to go to dining halls. They have very healthy options. Can you try that?"')
df.add_system_transition(State.P4E2A1AERR, State.P4E2A1A, '"Could you explain a little further?"')
df.add_user_transition(State.P4E2A1A, State.U4E2A1A1, "[$yes=#ONT(ontaffirm)]")
df.add_user_transition(State.P4E2A1A, State.U4E2A1A2, "[$no=#ONT(ontnegate)]")
df.add_system_transition(State.U4E2A1A1, State.END, '"Goodbye! Thanks for talking to me today!"')
df.add_system_transition(State.U4E2A1A2, State.P4C2B1A2A2A,
                         '"I think this inability to take action holds you back. Why don\'t you brace yourself to take action and then we can talk again next time?"')
df.add_system_transition(State.U4E2A2, State.P4E2A2A,
                         '"Then you need to start grocery shopping for yourself. Is money a problem?"')
df.add_system_transition(State.P4E2A2AERR, State.P4E2A2A, '"Could you explain a little further??"')
df.add_user_transition(State.P4E2A2A, State.U4E2A2A2, "[$yes=#ONT(ontaffirm)]")
df.add_user_transition(State.P4E2A2A, State.U4E2A2A1, "[$no=#ONT(ontnegate)]")
df.add_system_transition(State.U4E2A2A2, State.P4E2A2A2A,
                         '"You should talk to your career center about finding a job. You need to eat. Do you think you can look for a job?"')
df.add_system_transition(State.P4E2A2A2AERR, State.P4E2A2A2A, '"Could you explain a little further?"')
df.add_user_transition(State.P4E2A2A2A, State.U4E2A1A1, "[$yes=#ONT(ontaffirm)]")
df.add_user_transition(State.P4E2A2A2A, State.U4E2A1A2, "[$no=#ONT(ontnegate)]")
df.add_system_transition(State.U4E2A2A1, State.P4E2A2A1A, '"Good, then you should go grocery shopping more often."')
df.add_user_transition(State.P4E2A2A1A, State.U4E2A2A1A1, "/.*/")
df.add_system_transition(State.U4E2A2A1A1, State.END, '"Goodbye! Thanks for talking to me today!"')

########### Confrontation Branch (Yuewu) ########################
df.add_system_transition(State.confrontation_answer, State.confrontation_cause_prompt,
                         '[!"How did the"$confrontation"start?" $pronoun="them"]')
df.set_error_successor(State.confrontation_answer, State.confrontation_cause_self)
# -> argument branchag

df.add_system_transition(State.confrontation_cause_error, State.confrontation_noCatch_self_prompt,
                         '"Do you feel like it had something to do with what you did?"')
df.add_user_transition(State.confrontation_noCatch_self_prompt, State.confrontation_cause_self, "#ONT(ontaffirm)")
df.set_error_successor(State.confrontation_noCatch_self_prompt, State.confrontation_cause_self)

##### argument branch
df.add_user_transition(State.confrontation_cause_prompt, State.confrontation_cause_self, '[{I,i}]')
df.add_system_transition(State.confrontation_cause_self, State.confrontation_usual_prompt,
                         '"Is this something that has happened before?"')
# -> usual

df.add_user_transition(State.confrontation_cause_prompt, State.confrontation_cause_other, '[$person=#POS(propn)]')
df.add_system_transition(State.confrontation_cause_other, State.confrontation_intentional_yn,
                         '"Do you think it was intentional?"')
# -> argument motive

df.set_error_successor(State.confrontation_cause_prompt, State.confrontation_cause_self)
# -> usual


##### argument motive
df.add_user_transition(State.confrontation_intentional_yn, State.confrontation_intentional_answer, "#ONT(ontaffirm)")
# -> exposure
df.set_error_successor(State.confrontation_intentional_yn, State.confrontation_intentional_answer)
# -> advice

df.add_system_transition(State.confrontation_intentional_answer, State.confrontation_intentional_motive_prompt,
                         '"Why do you think they did that?"')
df.add_user_transition(State.confrontation_intentional_motive_prompt, State.confrontation_intentional_motive_answer,
                       '[{because,Because} $reason=/.*/]')
df.set_error_successor(State.confrontation_intentional_motive_prompt, State.confrontation_cause_self)
# -> usual

df.add_system_transition(State.confrontation_intentional_motive_answer, State.confrontation_intentional_motive_yn,
                         '"Is it justified to argue because"$reason"?"')
df.add_user_transition(State.confrontation_intentional_motive_yn, State.confrontation_exposure_prompt,
                       "#ONT(ontaffirm)")
# -> usual
df.add_user_transition(State.confrontation_intentional_motive_yn, State.confrontation_treatment_journaling, "#ONT(ontnegate)") ### Journaling
# -> advice

##### usual
df.add_user_transition(State.confrontation_usual_prompt, State.confrontation_usual_yn, "#ONT(ontaffirm)")
df.add_system_transition(State.confrontation_usual_yn, State.confrontation_usual_when,
                         '"When was the last time this has happened?"')

df.add_user_transition(State.confrontation_usual_prompt, State.confrontation_advice_yn, "#ONT(ontnegate)")
# -> exposure

# df.add_user_transition(State.confrontation_usual_when,State.confrontation_usual_when_answer,"$time=#NER(date)")
df.set_error_successor(State.confrontation_usual_prompt, State.confrontation_usual_when_answer)
# -> exposure (because no time catch)
df.add_system_transition(State.confrontation_usual_when_answer, State.confrontation_usual_when_yn,
                         '"Have you met with them since then where you haven\'t had a "$confrontation"?"')
df.set_error_successor(State.confrontation_usual_when_answer, State.confrontation_treatment_journaling) ### Journaling
# -> advice if error

df.add_user_transition(State.confrontation_usual_when_yn, State.confrontation_advice_yn, "#ONT(ontaffirm)")
# -> advice
df.add_user_transition(State.confrontation_usual_when_yn, State.confrontation_exposure_end, "#ONT(ontnegate)")
# -> exposure

##### advice
df.add_system_transition(State.confrontation_advice_yn, State.confrontation_advice_yn_answer,
                         '"Could I offer you some advice?"')
df.add_user_transition(State.confrontation_advice_yn_answer, State.confrontation_advice_calmer_yn, "#ONT(ontaffirm)")
df.set_error_successor(State.confrontation_advice_yn_answer, State.ENDwGREET)
# -> END
df.add_system_transition(State.confrontation_advice_calmer_yn, State.confrontation_advice_calmer_answer,
                         '"Okay, do you think a calmer attitude would have mitigated the"$confrontation"?"')
df.set_error_successor(State.confrontation_advice_calmer_answer, State.confrontation_treatment_relaxedbreathing)

df.add_system_transition(State.confrontation_treatment_placeholder, State.ENDwGREET,
                         '"We\'re still researching the best advice to give, please come back soon"')
# TO DO: add treatments


##### exposure
df.add_system_transition(State.confrontation_exposure_prompt, State.confrontation_exposure_answer,
                         '"Why do you spend time with "$pronoun"?"')
df.add_user_transition(State.confrontation_exposure_answer, State.confrontation_exposure_why,
                       '[{because,Because} $reason=/.*/]')
df.set_error_successor(State.confrontation_exposure_answer, State.confrontation_exposure_why)

df.add_system_transition(State.confrontation_exposure_why, State.confrontation_exposure_yn,
                         '"Do you think you\'ll talk with them again soon?"')

df.add_user_transition(State.confrontation_exposure_yn, State.confrontation_treatment_relaxedbreathing, "#ONT(ontaffirm)") ### Relaxed breathing
df.add_user_transition(State.confrontation_exposure_yn, State.confrontation_exposure_end, "#ONT(ontnegate)")
# -> advice
df.set_error_successor(State.confrontation_exposure_yn, State.confrontation_exposure_end)

df.add_system_transition(State.confrontation_exposure_end, State.END,
                         '"I think it\'s best to spend some time cooling off after a"$confrontation"."')

##### Treatment branch
### Relaxed breathing
df.add_system_transition(State.confrontation_treatment_relaxedbreathing,State.confrontation_treatment_relaxedbreathing_response,
                         '"Based on your responses, I would recommend an exercise in mindfulness. Is that something you\'d be interested in? "')
df.add_user_transition(State.confrontation_treatment_relaxedbreathing_response,State.confrontation_treatment_relaxedbreathing2,"#ONT(ontaffirm)")
df.set_error_successor(State.confrontation_treatment_relaxedbreathing_response,State.ENDwGREET)
df.add_system_transition(State.confrontation_treatment_relaxedbreathing2,State.confrontation_treatment_relaxedbreathing_response2,
                         '"The resource I recommend is a website called Positive Psychology. The link to mindfulness is positivepsychology.com/mindfulness-exercises-techniques-activities/"')
### Journaling
df.add_system_transition(State.confrontation_treatment_journaling,State.confrontation_treatment_relaxedbreathing_response,
                         '"Based on your responses, I would recommend is journaling. Is that something you\'d be interested in? "')
df.add_user_transition(State.confrontation_treatment_journaling_response,State.confrontation_treatment_journaling2,"#ONT(ontaffirm)")
df.set_error_successor(State.confrontation_treatment_journaling_response,State.ENDwGREET)
df.add_system_transition(State.confrontation_treatment_journaling2,State.confrontation_treatment_journaling_response2,
                         '"The resource I recommend is a website called Positive Psychology. The link to mindfulness is positivepsychology.com/gratitude-journal/"')
# -> END

# ENDwGREET
df.add_system_transition(State.ENDwGREET, State.EXIT, '"Alright, have a nice day!"')

#############ANGELA
df.add_system_transition(State.A1111, State.S2, '"Haha, the world is pretty crazy now isn\'t it? Are you in the US?"')
df.add_system_transition(State.U11, State.S2, '"Haha, the world is pretty crazy now isn\'t it? Are you in the US?"')
df.add_user_transition(State.S2, State.U7, "#ONT(ontaffirm)")
df.add_user_transition(State.S2, State.U8, "#ONT(ontnegate)")
df.add_system_transition(State.U7, State.S1, '"Which state are you in right now?"')
df.add_user_transition(State.S1, State.U1, "#ONT(ontnewjersey)")
df.add_user_transition(State.S1, State.U2, "#ONT(ontnewyork)")
df.add_user_transition(State.S1, State.U3, "#ONT(ontcalifornia)")
df.add_user_transition(State.S1, State.U4, "#ONT(ontmichigan)")
df.add_user_transition(State.S1, State.U5, "#ONT(ontbadstate)")
df.add_user_transition(State.S1, State.U6, "#ONT(ontokaystate)")
df.add_system_transition(State.U6, State.S3, '"Oh, I heard that corona not too bad there! How are you doing with social distancing?"')
df.add_system_transition(State.U5, State.S4, '"Yikes, I hear corona is spreading very quickly there. How are you doing with social distancing?"')
df.add_system_transition(State.U1, State.S5, '"Yikes, NJ is not a good place to be right now. How are you doing with social distancing?"')
df.add_system_transition(State.U2, State.S6, '"Yikes, NYC is very scary right now. How are you doing with social distancing?"')
df.add_system_transition(State.U3, State.S7, '"Not as bad as New York, but I\'m sure it\'s still bad in California. How are you going with social distancing?"')
df.add_system_transition(State.U4, State.S8, '"Yeah, I\'m personally surprised Michigan is up there with NY and NJ in coronavirus cases! How are you doing with social distancing?"')
df.add_system_transition(State.U8, State.S9, '"Well, how are you doing with social distancing?"')
df.add_user_transition(State.S3, State.U9, "[$checkin=#ONT(ontpositive,ontneutral)]")
df.add_user_transition(State.S3, State.U10, "[$checkin=#ONT(ontnegative)]")
df.add_user_transition(State.S4, State.U9, "[$checkin=#ONT(ontpositive,ontneutral)]")
df.add_user_transition(State.S4, State.U10, "[$checkin=#ONT(ontnegative)]")
df.add_user_transition(State.S8, State.U9, "[$checkin=#ONT(ontpositive,ontneutral)]")
df.add_user_transition(State.S8, State.U10, "[$checkin=#ONT(ontnegative)]")
df.add_user_transition(State.S7, State.U9, "[$checkin=#ONT(ontpositive,ontneutral)]")
df.add_user_transition(State.S7, State.U10, "[$checkin=#ONT(ontnegative)]")
df.add_user_transition(State.S6, State.U9, "[$checkin=#ONT(ontpositive,ontneutral)]")
df.add_user_transition(State.S6, State.U10, "[$checkin=#ONT(ontnegative)]")
df.add_user_transition(State.S5, State.U9, "[$checkin=#ONT(ontpositive,ontneutral)]")
df.add_user_transition(State.S5, State.U10, "[$checkin=#ONT(ontnegative)]")
df.add_user_transition(State.S9, State.U9, "[$checkin=#ONT(ontpositive,ontneutral)]")
df.add_user_transition(State.S9, State.U10, "[$checkin=#ONT(ontnegative)]")
df.add_system_transition(State.U9, State.S10, '"Well I\'m glad you\'re not suffering! What do you spend your free time doing?"')
df.add_system_transition(State.U10, State.S11, '"Oh no! I\'m sorry that the current events have affected your mental health. What have you been doing to keep busy?"')
df.add_user_transition(State.S10, State.U12, "[$checkin=#ONT(ontstillbusy)]")
df.add_user_transition(State.S10, State.U13, "[$checkin=#ONT(ontgoodactivities)]")
df.add_user_transition(State.S10, State.U14, "[$checkin=#ONT(ontbadactivities)]")
df.add_user_transition(State.S10, State.U15, "[$checkin=#ONT(ontwasteoftime)]")
df.add_user_transition(State.S11, State.U12, "[$checkin=#ONT(ontstillbusy)]")
df.add_user_transition(State.S11, State.U13, "[$checkin=#ONT(ontgoodactivities)]")
df.add_user_transition(State.S11, State.U14, "[$checkin=#ONT(ontbadactivities)]")
df.add_user_transition(State.S11, State.U15, "[$checkin=#ONT(ontwasteoftime)]")
df.add_system_transition(State.U12, State.U13, '"Well, it\'s good that you\'re still busy but make sure you make time for yourself! Do you do any activities to relax?"')
df.add_user_transition(State.S12, State.U13, "[$checkin=#ONT(ontgoodactivities)]")
df.add_user_transition(State.S12, State.U14, "[$checkin=#ONT(ontbadactivities)]")
df.add_user_transition(State.S12, State.U16, "[$checkin=#ONT(ontaffirm)]")
df.add_system_transition(State.U16, State.S13, '"Well, what do you do to relax?"')
df.add_user_transition(State.S13, State.U13, "[$checkin=#ONT(ontgoodactivities)]")
df.add_user_transition(State.S13, State.U14, "[$checkin=#ONT(ontbadactivities)]")
df.add_user_transition(State.S12, State.U17, "[$checkin=#ONT(ontnegate)]")
df.add_system_transition(State.U17, State.S14, '"That\'s not good! I know that life feels like it\'s at a standstill right now, but you should still use your time wisely. Do you have any ideas for activities you could do?"')
df.add_user_transition(State.S14, State.U18, "[$checkin=#ONT(ontnegate)]")
df.add_system_transition(State.U18, State.P4C2B1A2A2A, '"I think this inability to take action holds you back. Why don\'t you brace yourself to take action and then we can talk again next time?"')
df.add_user_transition(State.S14, State.U13, "[$checkin=#ONT(ontgoodactivities)]")
df.add_user_transition(State.S13, State.U15, "[$checkin=#ONT(ontwasteoftime)]")
df.add_user_transition(State.S14, State.U14, "[$checkin=#ONT(ontbadactivities)]")
df.add_user_transition(State.S14, State.U15, "[$checkin=#ONT(ontwasteoftime)]")
df.add_system_transition(State.U13, State.S15, '"That\'s a great way to spend your time! If you keep doing that, I think you\'ll be okay once this all passes. I would also suggest reminding yourself of everything you have to be grateful for."')
df.add_user_transition(State.S15, State.U19, "/.*/")
df.add_system_transition(State.U19, State.S16, '"Thanks for talking to me today! Hope we can talk again sometime."')
df.add_system_transition(State.U15, State.S17, '"That\'s not the best way to spend your time, but I get that things are a little crazy right now. At least you\'re relaxed."')
df.add_system_transition(State.U14, State.S18, '"Oh no! What has made you do this?"')
if __name__ == '__main__':
    df.run(debugging=False)
